package com.appverse.user_service.mapper;


import com.appverse.user_service.dto.UserRequest;
import com.appverse.user_service.dto.UserResponse;
import com.appverse.user_service.model.User;
import org.mapstruct.Mapper;
import org.mapstruct.Mapping;
import org.mapstruct.MappingTarget;
import org.mapstruct.NullValuePropertyMappingStrategy;
import org.mapstruct.ReportingPolicy;

import java.util.List;

@Mapper(
    componentModel = "spring", // Generates a Spring bean
    unmappedTargetPolicy = ReportingPolicy.IGNORE, // Ignores unmapped fields
    nullValuePropertyMappingStrategy = NullValuePropertyMappingStrategy.IGNORE // Ignores null values from DTO during update
)
public interface UserMapper {

    // --- UserRequest to User Entity ---


    /**
     * Maps UserRequest DTO to User entity for creation.
     * Fields like id, createdAt, updatedAt, status, deactivatedByAdmin, lastLoginAt
     * are typically set by @PrePersist or other service logic, so they are not mapped from UserRequest.
     */
    @Mapping(target = "id", ignore = true) // ID is generated by @PrePersist
    @Mapping(target = "status", ignore = true) // Status is set by @PrePersist
    @Mapping(target = "createdAt", ignore = true) // Set by @PrePersist
    @Mapping(target = "updatedAt", ignore = true) // Set by @PrePersist
    @Mapping(target = "deactivatedByAdmin", ignore = true) // Set by @PrePersist
    @Mapping(target = "lastLoginAt", ignore = true) // Typically not set from create request
    User toEntity(UserRequest userRequest);


    // --- User Entity to UserResponse ---

    /**
     * Maps User entity to UserResponse DTO.
     */
    UserResponse toResponse(User user);

    /**
     * Maps a list of User entities to a list of UserResponse DTOs.
     */
    List<UserResponse> toResponseList(List<User> users);


    // --- Updating Existing User Entity from UserRequest ---

    /**
     * Updates an existing User entity from a UserRequest DTO.
     * Ignores fields that should not be updated from a general request,
     * like id, keycloakUserId (usually immutable), and system-managed fields.
     *
     * @param userRequest DTO containing update information.
     * @param user        The entity to be updated.
     */
    @Mapping(target = "id", ignore = true) // ID should not be changed
    @Mapping(target = "keycloakUserId", ignore = true) // keycloakUserId is usually immutable after creation
    @Mapping(target = "status", ignore = true) // Status is typically managed by specific actions/admin
    @Mapping(target = "createdAt", ignore = true) // Should not be changed
    @Mapping(target = "updatedAt", ignore = true) // Handled by @PreUpdate
    @Mapping(target = "deactivatedByAdmin", ignore = true) // Managed by specific admin actions
    @Mapping(target = "lastLoginAt", ignore = true) // Typically not updated this way
    void updateEntityFromRequest(UserRequest userRequest, @MappingTarget User user);

}