package com.appverse.cart_service.service.serviceImpl;


import com.appverse.cart_service.client.ApplicationServiceClient;
import com.appverse.cart_service.dto.AddItemToCartRequest;
import com.appverse.cart_service.dto.CartResponse;
import com.appverse.cart_service.dto.UpdateCartItemQuantityRequest;
import com.appverse.cart_service.exception.DatabaseOperationException;
import com.appverse.cart_service.exception.ProductUnavailableException; // Custom exception
import com.appverse.cart_service.exception.ResourceNotFoundException;
import com.appverse.cart_service.mapper.CartMapper; // You'll need a CartMapper
import com.appverse.cart_service.model.Cart;
import com.appverse.cart_service.model.CartItem;
import com.appverse.cart_service.repository.CartRepository;
import com.appverse.cart_service.service.CartService;

import feign.FeignException;
import lombok.RequiredArgsConstructor;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.dao.DataAccessException;
import org.springframework.stereotype.Service;
import org.springframework.transaction.annotation.Transactional;

import java.time.Instant;
import java.util.Optional;

@Service
@RequiredArgsConstructor
@Transactional
public class CartServiceImpl implements CartService {

    private static final Logger log = LoggerFactory.getLogger(CartServiceImpl.class);

    private final CartRepository cartRepository;
    private final ApplicationServiceClient applicationServiceClient; // Feign client
    private final CartMapper cartMapper; // You will need to create this MapStruct mapper

    @Override
    @Transactional(readOnly = true)
    public CartResponse getOrCreateCartByUserId(String userId) {
        Cart cart = cartRepository.findByUserId(userId)
                .orElseGet(() -> createNewCart(userId));
        return cartMapper.toCartResponse(cart);
    }

    private Cart createNewCart(String userId) {
        Cart newCart = Cart.builder()
                .userId(userId)
                // .id(UUID.randomUUID()) // If cart ID is UUID and auto-generated by app
                .build();
        // JPA Auditing will set createdAt and updatedAt if @PrePersist is not in Cart entity
        // If @PrePersist IS in Cart entity, it handles id, createdAt, updatedAt.
        // Otherwise, set them here:
        // Instant now = Instant.now();
        // newCart.setCreatedAt(now);
        // newCart.setUpdatedAt(now);
        try {
            return cartRepository.save(newCart);
        } catch (DataAccessException e) {
            log.error("Database error creating new cart for user {}: {}", userId, e.getMessage(), e);
            throw new DatabaseOperationException("Could not create cart for user. "+ e);
        }
    }

    @Override
    public CartResponse addItemToCart(String userId, AddItemToCartRequest addItemRequest) {
        Cart cart = cartRepository.findByUserId(userId)
                .orElseGet(() -> createNewCart(userId));

        ApplicationServiceClient.ApplicationDetails appDetails;
        try {
            log.debug("Fetching application details for ID: {}", addItemRequest.applicationId());
            appDetails = applicationServiceClient.getApplicationDetails(addItemRequest.applicationId());
            if (appDetails == null) { // Should be caught by FeignException.NotFound but defensive
                throw new ResourceNotFoundException("Application with ID " + addItemRequest.applicationId() + " not found.");
            }
        } catch (FeignException.NotFound e) {
            log.warn("Application not found via Feign client: {}", addItemRequest.applicationId(), e);
            throw new ResourceNotFoundException("Application with ID " + addItemRequest.applicationId() + " not found.");
        } catch (FeignException e) {
            log.error("Error fetching application details for ID {}: {}", addItemRequest.applicationId(), e.getMessage(), e);
            throw new ProductUnavailableException("Could not retrieve application details. Service may be temporarily unavailable.", e);
        }


        Optional<CartItem> existingItemOpt = cart.getItems().stream()
                .filter(item -> item.getApplicationId().equals(addItemRequest.applicationId()))
                .findFirst();

        if (existingItemOpt.isPresent()) {
            CartItem existingItem = existingItemOpt.get();
            existingItem.setQuantity(existingItem.getQuantity() + addItemRequest.quantity());
            existingItem.setAddedAt(Instant.now()); // Update timestamp
        } else {
            CartItem newItem = CartItem.builder()
                    .applicationId(appDetails.id())
                    .applicationName(appDetails.name())
                    .quantity(addItemRequest.quantity())
                    .unitPrice(appDetails.price())
                    .currency(appDetails.currency())
                    .isFree(appDetails.isFree())
                    .thumbnailUrl(appDetails.thumbnailUrl())
                    // .developerId(appDetails.developerId()) // if fetched and stored
                    .addedAt(Instant.now())
                    .build();
            cart.addItem(newItem); // Uses helper method to set bi-directional link
        }

        try {
            Cart updatedCart = cartRepository.save(cart);
            return cartMapper.toCartResponse(updatedCart);
        } catch (DataAccessException e) {
            log.error("Database error adding item to cart for user {}: {}", userId, e.getMessage(), e);
            throw new DatabaseOperationException("Could not add item to cart. " + e);
        }
    }

    @Override
    public CartResponse updateCartItemQuantity(String userId, String applicationId, UpdateCartItemQuantityRequest updateRequest) {
        Cart cart = cartRepository.findByUserId(userId)
                .orElseThrow(() -> new ResourceNotFoundException("Cart not found for user: " + userId));

        CartItem itemToUpdate = cart.getItems().stream()
                .filter(item -> item.getApplicationId().equals(applicationId))
                .findFirst()
                .orElseThrow(() -> new ResourceNotFoundException("Item with application ID " + applicationId + " not found in cart."));

        if (updateRequest.newQuantity() <= 0) {
            cart.removeItem(itemToUpdate); // Uses helper method
        } else {
            itemToUpdate.setQuantity(updateRequest.newQuantity());
            itemToUpdate.setAddedAt(Instant.now()); // Update timestamp
        }
        
        try {
            Cart updatedCart = cartRepository.save(cart);
            return cartMapper.toCartResponse(updatedCart);
        } catch (DataAccessException e) {
            log.error("Database error updating item quantity in cart for user {}: {}", userId, e.getMessage(), e);
            throw new DatabaseOperationException("Could not update item quantity in cart. "+ e);
        }
    }

    @Override
    public CartResponse removeItemFromCart(String userId, String applicationId) {
        Cart cart = cartRepository.findByUserId(userId)
                .orElseThrow(() -> new ResourceNotFoundException("Cart not found for user: " + userId));

        CartItem itemToRemove = cart.getItems().stream()
                .filter(item -> item.getApplicationId().equals(applicationId))
                .findFirst()
                .orElseThrow(() -> new ResourceNotFoundException("Item with application ID " + applicationId + " not found in cart."));
        
        cart.removeItem(itemToRemove); // Uses helper method to manage relationship and orphanRemoval
        
        try {
            Cart updatedCart = cartRepository.save(cart);
            return cartMapper.toCartResponse(updatedCart);
        } catch (DataAccessException e) {
            log.error("Database error removing item from cart for user {}: {}", userId, e.getMessage(), e);
            throw new DatabaseOperationException("Could not remove item from cart. "+ e);
        }
    }

    @Override
    public CartResponse clearCart(String userId) {
        Cart cart = cartRepository.findByUserId(userId)
                .orElseThrow(() -> new ResourceNotFoundException("Cart not found for user: " + userId));
        
        cart.getItems().clear(); // Relies on orphanRemoval=true to delete items from DB
        // If not using orphanRemoval, you'd need to delete items via CartItemRepository
        
        try {
            Cart updatedCart = cartRepository.save(cart);
            return cartMapper.toCartResponse(updatedCart);
        } catch (DataAccessException e) {
            log.error("Database error clearing cart for user {}: {}", userId, e.getMessage(), e);
            throw new DatabaseOperationException("Could not clear cart. " + e);
        }
    }
}